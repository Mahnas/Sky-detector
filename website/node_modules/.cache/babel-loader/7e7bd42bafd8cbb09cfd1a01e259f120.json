{"ast":null,"code":"var _jsxFileName = \"/home/chirag/Documents/WebD/SIH/website/src/components/UploadItemComponent.js\";\nimport React, { Component } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport { Button, Label, Col, Row, Input } from 'reactstrap';\nimport LineChart from 'react-linechart';\nimport '../node_modules/react-linechart/dist/styles.css';\n\nconst required = val => val && val.length;\n\nconst requiredNum = val => !!val;\n\nconst minLength = len => val => val && val.length >= len;\n\nconst maxVal = len => val => !val || val <= len;\n\nconst minVal = len => val => val && val >= len;\n\nconst isNumber = val => !isNaN(Number(val));\n\nconst multiple = num => val => !val || val % num === 0;\n/*let fileAdder=(e)=>{\n    this.setState({imageFiles: this.state.imageFiles.concat(e.target.files)})\n};*/\n\n\nexport const baseUrl = 'http://6ff1e5d3.ngrok.io/';\nexport const imageUrl = baseUrl + 'public/';\n\nclass UploadItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bid: false,\n      images: null,\n      imageFiles: [],\n      submitted: false\n    };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  onDrop(image) {\n    console.log(image);\n    this.setState({\n      images: image\n    });\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const data = [{\n      color: 'steelblue',\n      points: this.state.angles.map((angle, i) => ({\n        x: i + 1,\n        y: angle\n      }))\n    }];\n    return React.createElement(\"div\", {\n      className: \"container  \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row justify-content-center heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \" Upload an image\"))), React.createElement(Row, {\n      className: \"row row-content justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(ImageUploader, {\n      withIcon: true,\n      label: \"Recommended height : 256px, .jpg,.png,.jpeg allowed\",\n      buttonText: \"Choose images\",\n      withLabel: true,\n      onChange: this.onDrop,\n      labelClass: \"text-secondary\",\n      imgExtension: ['.jpg', '.gif', '.png', '.jpeg'],\n      maxFileSize: 5242880,\n      withPreview: true,\n      className: \"uploader\",\n      name: \"images\",\n      singleImage: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(Row, {\n      className: \"align-self-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Col, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"bg-primary\",\n      onClick: () => {\n        let formData = new FormData(); // Assume \"photo\" is the name of the form field the server expects\n\n        formData.append('image', this.state.images[0]);\n        formData.append('username', 'cjchirag7');\n        formData.append('addr1', 'IIT (ISM) Campus');\n        formData.append('addr2', 'Dhanbad, Jharkhand');\n        return fetch(`${baseUrl}get_mask`, {\n          method: 'POST',\n          body: formData,\n          header: {\n            'content-type': 'multipart/form-data'\n          },\n          credentials: 'same-origin'\n        }).then(response => {\n          if (response.ok) {\n            return response;\n          }\n\n          const error = new Error(`Error ${response.status}: ${response.statusText}`);\n          error.response = response;\n          throw error;\n        }, error => {\n          const errmess = new Error(error.message);\n          throw errmess;\n        }).then(response => response.json()).then(response => {\n          const mask = response.mask,\n                angles = response.angles,\n                percent = response.percent,\n                image = response.image,\n                error = response.error;\n\n          if (error) {\n            alert('Image not uploaded properly.');\n            console.log(error);\n            return;\n          }\n\n          this.setState({\n            mask: mask,\n            angles: angles,\n            percent: percent,\n            submitted: true\n          });\n        }).catch(error => {\n          console.log(error.message);\n          alert(error.message);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Submit\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), this.state.submitted ? React.createElement(Row, {\n      className: \"row justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: imageUrl + this.state.mask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(LineChart, {\n      width: 600,\n      height: 400,\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })) : '', React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default UploadItem;","map":{"version":3,"sources":["/home/chirag/Documents/WebD/SIH/website/src/components/UploadItemComponent.js"],"names":["React","Component","ImageUploader","Button","Label","Col","Row","Input","LineChart","required","val","length","requiredNum","minLength","len","maxVal","minVal","isNumber","isNaN","Number","multiple","num","baseUrl","imageUrl","UploadItem","constructor","props","state","bid","images","imageFiles","submitted","onDrop","bind","image","console","log","setState","componentDidMount","window","scrollTo","render","data","color","points","angles","map","angle","i","x","y","formData","FormData","append","fetch","method","body","header","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","mask","percent","alert","catch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport { Button, Label, Col, Row, Input } from 'reactstrap';\nimport LineChart from 'react-linechart';\nimport '../node_modules/react-linechart/dist/styles.css';\n\nconst required = val => val && val.length;\nconst requiredNum = val => !!val;\nconst minLength = len => val => val && val.length >= len;\nconst maxVal = len => val => !val || val <= len;\nconst minVal = len => val => val && val >= len;\nconst isNumber = val => !isNaN(Number(val));\nconst multiple = num => val => !val || val % num === 0;\n\n/*let fileAdder=(e)=>{\n    this.setState({imageFiles: this.state.imageFiles.concat(e.target.files)})\n};*/\n\nexport const baseUrl = 'http://6ff1e5d3.ngrok.io/';\n\nexport const imageUrl = baseUrl + 'public/';\n\nclass UploadItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bid: false,\n      images: null,\n      imageFiles: [],\n      submitted: false\n    };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  onDrop(image) {\n    console.log(image);\n    this.setState({\n      images: image\n    });\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const data = [\n      {\n        color: 'steelblue',\n        points: this.state.angles.map((angle, i) => ({\n          x: i + 1,\n          y: angle\n        }))\n      }\n    ];\n    return (\n      <div className='container  '>\n        <div className='row justify-content-center heading'>\n          <div className='col-12'>\n            <h3 align='center'> Upload an image</h3>\n          </div>\n        </div>\n        <Row className='row row-content justify-content-center'>\n          <ImageUploader\n            withIcon={true}\n            label='Recommended height : 256px, .jpg,.png,.jpeg allowed'\n            buttonText='Choose images'\n            withLabel={true}\n            onChange={this.onDrop}\n            labelClass='text-secondary'\n            imgExtension={['.jpg', '.gif', '.png', '.jpeg']}\n            maxFileSize={5242880}\n            withPreview\n            className='uploader'\n            name='images'\n            singleImage\n          />\n        </Row>\n        {/* <Row className='form-group'>\n          <Label htmlFor='description' md={2}>\n            Add\n          </Label>\n          <Col md={10}>\n            <Input\n              model='.description'\n              id='description'\n              name='description'\n              placeholder='Some description of the product'\n              className='form-control'\n            />\n          </Col>\n        </Row> */}\n        <Row className='align-self-center'>\n          <Col className='text-center'>\n            <Button\n              className='bg-primary'\n              onClick={() => {\n                let formData = new FormData();\n                // Assume \"photo\" is the name of the form field the server expects\n                formData.append('image', this.state.images[0]);\n                formData.append('username', 'cjchirag7');\n                formData.append('addr1', 'IIT (ISM) Campus');\n                formData.append('addr2', 'Dhanbad, Jharkhand');\n                return fetch(`${baseUrl}get_mask`, {\n                  method: 'POST',\n                  body: formData,\n                  header: {\n                    'content-type': 'multipart/form-data'\n                  },\n                  credentials: 'same-origin'\n                })\n                  .then(\n                    response => {\n                      if (response.ok) {\n                        return response;\n                      }\n\n                      const error = new Error(\n                        `Error ${response.status}: ${response.statusText}`\n                      );\n                      error.response = response;\n                      throw error;\n                    },\n                    error => {\n                      const errmess = new Error(error.message);\n                      throw errmess;\n                    }\n                  )\n                  .then(response => response.json())\n                  .then(response => {\n                    const { mask, angles, percent, image, error } = response;\n                    if (error) {\n                      alert('Image not uploaded properly.');\n                      console.log(error);\n                      return;\n                    }\n                    this.setState({\n                      mask: mask,\n                      angles: angles,\n                      percent: percent,\n                      submitted: true\n                    });\n                  })\n                  .catch(error => {\n                    console.log(error.message);\n                    alert(error.message);\n                  });\n              }}\n            >\n              Submit\n            </Button>\n          </Col>\n        </Row>\n        <br />\n        <br />\n        {this.state.submitted ? (\n          <Row className='row justify-content-center'>\n            <img src={imageUrl + this.state.mask} />\n            <br />\n            <br />\n            <LineChart width={600} height={400} data={data} />\n          </Row>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        <br /> <br />\n        <br />\n        <br />\n        <br /> <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default UploadItem;\n"]},"metadata":{},"sourceType":"module"}